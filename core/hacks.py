#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""DFHack management."""
from __future__ import print_function, unicode_literals, absolute_import

import sys, os, shutil, filecmp
from io import open
from . import paths
from .lnp import lnp

def read_hacks():
    """Reads which hacks are enabled."""
    try:
        f = open(
            paths.get('df', 'PyLNP_dfhack_onload.init'),
            encoding="latin1")
        hacklines = f.readlines()
        for h in get_hacks().values():
            h['enabled'] = h['command']+'\n' in hacklines
        f.close()
    except IOError:
        for h in get_hacks().values():
            h['enabled'] = False

def is_dfhack_enabled():
    """Returns YES if DFHack should be used."""
    if sys.platform == 'win32':
        if 'dfhack' not in lnp.df_info.variations:
            return False
        sdl = paths.get('df', 'SDL.dll')
        sdlreal = paths.get('df', 'SDLreal.dll')
        if not os.path.isfile(sdlreal):
            return False
        return not filecmp.cmp(sdl, sdlreal, 0)
    else:
        return lnp.userconfig.get_value('use_dfhack', True)

def toggle_dfhack():
    """Toggles the use of DFHack."""
    if sys.platform == 'win32':
        if 'dfhack' not in lnp.df_info.variations:
            return
        sdl = paths.get('df', 'SDL.dll')
        sdlhack = paths.get('df', 'SDLhack.dll')
        sdlreal = paths.get('df', 'SDLreal.dll')
        if is_dfhack_enabled():
            shutil.copyfile(sdl, sdlhack)
            shutil.copyfile(sdlreal, sdl)
        else:
            shutil.copyfile(sdl, sdlreal)
            shutil.copyfile(sdlhack, sdl)
    else:
        lnp.userconfig['use_dfhack'] = not lnp.userconfig.get_value(
            'use_dfhack', True)
        lnp.save_config()

def get_hacks():
    """Returns dict of available hacks."""
    return lnp.config.get_dict('dfhack')

def get_hack(title):
    """
    Returns the hack titled <title>, or None if this does not exist.

    Params:
        title
            The title of the hack.
    """
    try:
        return get_hacks()[title]
    except KeyError:
        return None

def toggle_hack(name):
    """
    Toggles the hack <name>.

    Params:
        name
            The name of the hack to toggle.
    """
    get_hack(name)['enabled'] = not get_hack(name)['enabled']
    rebuild_hacks()

def rebuild_hacks():
    """Rebuilds PyLNP_dfhack_onload.init with the enabled hacks."""
    f = open(
        paths.get('df', 'PyLNP_dfhack_onload.init'), 'w',
        encoding='latin1')
    f.write('# Generated by PyLNP\n\n')
    for k, h in get_hacks().items():
        if h['enabled']:
            f.write('# '+str(k)+'\n')
            f.write('# '+str(h['tooltip'])+'\n')
            f.write(h['command']+'\n\n')
    f.flush()
    f.close()
